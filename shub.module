<?php

include_once('shub.features.inc');


function shub_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      // Catch Sensor Board Data nodes being imported by mail handler.
      if ($node->type == 'sensor_board_data' && $node->field_sb_data_process_status[0]['value'] == NULL) {
        // Protect the field_sb_data_process from being NULL in the database
        $node->field_sb_data_process_status = array( 0 => array( 'value' => 'not processed'));
        // TODO get the Sensor Board ID from the string and save the relationship
        node_save($node);
      }
      break;
    case 'load':
      if ($node->type == 'sensor_board') {
        $node->sensors = shub_sensor_board_sensors_load($node->nid);
      }
  }
}

function shub_cron() {
  // Get all Sensor Server Data nodes that are not marked as 'processed'
  $q = " 
    SELECT node.nid AS nid
    FROM node node
    LEFT JOIN content_type_sensor_board_data
      ON node.vid = content_type_sensor_board_data.vid
    WHERE ((content_type_sensor_board_data.field_sb_data_process_status_value) = ('not processed'))
      AND (node.type in ('sensor_board_data'))
  ";
  $result = db_query($q, $sensor_server_id);
  $sensor_board_data_count = 0;
  $sensor_reading_count = 0;
  // parse each node
  while($nid = db_result($result)) {
    $node = node_load($nid);
    $sensor_reading_count += shub_parse_sensor_board_data($node);
    $sensor_board_data_count++;
  }
  watchdog('SHUB ', 'Parsed ' . $sensor_board_data_count 
          . ' Sensor Board Data nodes and created ' . $sensor_reading_count
          . ' Sensor Readings nodes.');
}

function shub_parse_sensor_board_data($sensor_board_data=NULL) {
  
  // test $data = "tempstring0 53,57,38,60,48";
  $data = "onewire 104018ef180c2:3, 104811ef18090:6, 10a14ef18059:4,
  103e23ef180bd:7, 10d13cef180a3:5";
  //$data = $sensor_board_data->body;
  
  // Get the Sesor Board node 
  $pos  = strpos($data, ' ');
  $sensor_board_id   = substr($data, 0, $pos);
  $sensor_board = shub_sensor_board_load($sensor_board_id);
  // No Sensor Board found, no parsing this Sensor Board Data node
  if (!$sensor_board) {
    return 0;
  }
  
  // Detect the string format
  if(strpos($data, ':') {
    
    // Parse the out the sensor readings
    $pos++;
    $data_cd  = substr($data , $pos, strlen($data));
    $sensor_strings = explode(',', $data_cd);
    foreach ($sensor_strings as $sensor_string) {
      $arr = explode(':', $sensor_string);
      $sensor_readings[$arr[0]] = $arr[1];
    }
    
    // Make sure the sensors in the readings have corresponding sensors nodes attached to the Sensor Board node
    foreach ($sensor_readings as $sensor_id => $sensor_reading_data) {
      if(!$sensor_board->sensors[$sensor_id]) {
        // TODO This could result in a ton of repeat messages
        drupal_watchdog('Sensor Hub', "Sensor Board {$sensor_board->id} is receiving data for sensors not assigned to that Sensor Board node.");
        return 0;
      }
    }

    // Give a warning if there is a Sensor node assigned to the Sensor Board node that does not have data in the sensor readings
    foreach ($sensor_board->sensor as $sensor_id => $sensor_node) {
      if(!$sensor_readings[$sensor_id]) {
        drupal_watchdog('Sensor Hub', "Sensor Board {$sensor_board->id} is not receiving data for Sensor {$sensor_id}.");
      }
    }

    

    
     
  }
  else {
    $pos++;
    $data_cd  = substr($data , $pos, strlen($data));
    $sensor_data = explode(',', $data_cd);
    // Retrieve the corresponding sensor nid's matching $sensor_board_nid to
    // node_node_data_field_sensor_to_sb.nid
    // Also, grab the sensor's string position in the sensor board data string.
    // The query is a bit of a monster right now, copied from Views :P
    $q = "
        SELECT node.nid AS nid, node.title AS node_title, node_data_field_sensor_data_string_pos.field_sensor_data_string_pos_value AS node_data_field_sensor_data_string_pos_field_sensor_data_string_pos_value, node.type AS node_type, node.vid AS node_vid FROM node node  LEFT JOIN content_type_sensor node_data_field_sensor_to_sb ON node.vid = node_data_field_sensor_to_sb.vid INNER JOIN node node_node_data_field_sensor_to_sb ON node_data_field_sensor_to_sb.field_sensor_to_sb_nid = node_node_data_field_sensor_to_sb.nid LEFT JOIN content_type_sensor node_data_field_sensor_data_string_pos ON node.vid = node_data_field_sensor_data_string_pos.vid WHERE (node.type in ('sensor')) AND (node_node_data_field_sensor_to_sb.nid = %s)
      ";
    $result = db_query($q, $sensor_board_nid);
    $i = 0;
    while($sensor = db_fetch_array($result)) {
      // create a new node object to save sensor reading data into
      $sensor_reading = new stdClass();
      $sensor_reading->type = 'sensor_reading';
      // form the relationship from the sensor reading node to the sensor node
      $sensor_reading->field_sensor_reading_to_sensor = array( 0 => array( 'nid' => $sensor['nid']));
      // form the relationship from the sensor reading node to the sensor board data node
      $sensor_reading->field_sensor_reading_to_sb_data = array( 0 => array( 'nid' => $sensor_board_data->nid));
      // form the relationship from the sensor reading node to the sensor board node
      $sensor_reading->field_sensor_reading_to_sb = array( 0 => array( 'nid' => $sensor_board_nid));
      // save the sensor data from the Sensor Server Data
      $sensor_reading->body = $sensor_data[$sensor['node_data_field_sensor_data_string_pos_field_sensor_data_string_pos_value']];
      // set the time correctly on the reading as it actually happened in the past
      $sensor_reading->created = $sensor_board_data->created;
      // set the owner
      $sensor_reading->uid = $sensor_board_data->uid;
      // give the Sensor Reading a title
      $sensor_reading->title = $sensor_board_id . ":" . $sensor['node_title'] . ":"
        . $sensor_reading->body . ':' . $sensor_board_data->created;// . $sensor_reading->
      // save the new Sensor Reading
      node_save($sensor_reading);
      $i++;
    }
    // Give this Sensor Board Data node its relationship to its Sensor Board
    $sensor_board_data->field_sb_data_to_sb = array( 0 => array('nid' => $sensor_board_nid));
    // Mark this Sensor Server Data node as processed
    $sensor_board_data->field_sb_data_process_status = array( 0 => array( 'value' => 'processed'));
    node_save($sensor_board_data);
    // Return the amount of sensor reading nodes created
    return $i;
}

function shub_get_sensor_board($sensor_board_id) {
  // Retrieve the corresponding sensor_board node by matching $sensor_board_id
  // to field_sensor_board_id
  $q = " 
    SELECT node.nid AS nid
    FROM node node
    LEFT JOIN content_type_sensor_board
      ON node.vid = content_type_sensor_board.vid
    WHERE (content_type_sensor_board.field_sb_id_value) = ('%s')
  ";
  $result = db_query($q, $sensor_board_id);
  $sensor_board_nid = db_result($result);
  return node_load($sensor_board_nid); 
}

function shub_sensor_board_sensors_load($nid = NULL, $id = NULL) {
  // Retrieve the corresponding sensor nid's matching $sensor_board_nid to
  // node_node_data_field_sensor_to_sb.nid
  // Also, grab the sensor's string position in the sensor board data string.
  // The query is a bit of a monster right now, copied from Views :P
  if($id) {
    // TODO add support for retrieving sensors by sensor board id
  }
  $q = "
      SELECT node.nid AS nid, node.title AS node_title, node_data_field_sensor_data_string_pos.field_sensor_data_string_pos_value AS node_data_field_sensor_data_string_pos_field_sensor_data_string_pos_value, node.type AS node_type, node.vid AS node_vid FROM node node  LEFT JOIN content_type_sensor node_data_field_sensor_to_sb ON node.vid = node_data_field_sensor_to_sb.vid INNER JOIN node node_node_data_field_sensor_to_sb ON node_data_field_sensor_to_sb.field_sensor_to_sb_nid = node_node_data_field_sensor_to_sb.nid LEFT JOIN content_type_sensor node_data_field_sensor_data_string_pos ON node.vid = node_data_field_sensor_data_string_pos.vid WHERE (node.type in ('sensor')) AND (node_node_data_field_sensor_to_sb.nid = %s)
    ";
  $result = db_query($q, $nid);
  $i = 0;
  while($sensor = db_fetch_array($result)) {
    $sensor = node_load($sensor['nid']);
    $sensors[$sensor->field_sensor_id] = $sensor;
  }
  return $sensors;
}
